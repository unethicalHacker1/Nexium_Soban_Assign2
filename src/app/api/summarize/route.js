import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import { createClient } from '@supabase/supabase-js';
import axios from 'axios';
import * as cheerio from 'cheerio';

// üï∑Ô∏è Scrape blog content from URL
const scrapeBlogContent = async (url) => {
  try {
    const { data } = await axios.get(url);
    const $ = cheerio.load(data);

    // Grab paragraphs inside main content (you can improve selector based on blog)
    const paragraphs = $('article p').map((_, el) => $(el).text()).get();

    const text = paragraphs.join(' ').replace(/\s+/g, ' ').trim();
    return text || null;
  } catch (err) {
    console.error("‚ùå Scraping failed:", err.message);
    return null;
  }
};


// ‚úÖ Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// ‚úÖ MongoDB (Mongoose)
const mongoUri = process.env.MONGODB_URI;
const connectToMongo = async () => {
  if (mongoose.connection.readyState === 0) {
    await mongoose.connect(mongoUri, {
      dbName: 'blogSummarizer',
    });
  }
};

const blogSchema = new mongoose.Schema({
  url: String,
  full_text: String,
  created_at: { type: Date, default: Date.now },
});

const Blog = mongoose.models.Blog || mongoose.model('Blog', blogSchema);

// üîÅ Simulated AI
const simulateAISummary = (text) =>
  text.split('.').slice(0, 2).join('.') + '. [AI summary simulated]';

// üåê Dictionary
const dictionary = {
  blog: 'ÿ®ŸÑÿß⁄Ø',
  summary: 'ÿÆŸÑÿßÿµ€Å',
  ai: 'ŸÖÿµŸÜŸàÿπ€å ÿ∞€ÅÿßŸÜÿ™',
  text: 'ŸÖÿ™ŸÜ',
  article: 'ŸÖÿ∂ŸÖŸàŸÜ',
  post: 'ÿ™ÿ≠ÿ±€åÿ±',
  example: 'ŸÖÿ´ÿßŸÑ',
  is: '€Å€í',
  this: '€å€Å',
  a: '',
  about: '⁄©€í ÿ®ÿßÿ±€í ŸÖ€å⁄∫',
  explains: 'Ÿàÿ∂ÿßÿ≠ÿ™ ⁄©ÿ±ÿ™ÿß €Å€í',
  generated: 'ÿ®ŸÜÿß€åÿß ⁄Ø€åÿß',
  the: '',
  and: 'ÿßŸàÿ±',
  or: '€åÿß',
  with: '⁄©€í ÿ≥ÿßÿ™⁄æ',
  without: '⁄©€í ÿ®ÿ∫€åÿ±',
  how: '⁄©€åÿ≥€í',
  to: '⁄©ÿ±ŸÜ€í',
  use: 'ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ',
  using: 'ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ ⁄©ÿ±ÿ™€í €ÅŸàÿ¶€í',
  learn: 'ÿ≥€å⁄©⁄æ€å⁄∫',
  learning: 'ÿ≥€å⁄©⁄æŸÜÿß',
  guide: 'ÿ±€ÅŸÜŸÖÿß',
  tutorial: 'ÿ≥ÿ®ŸÇ',
  simple: 'ÿ≥ÿßÿØ€Å',
  advanced: 'ÿßÿπŸÑ€å',
  for: '⁄©€í ŸÑ€å€í',
  from: 'ÿ≥€í',
  by: '⁄©€å ÿ∑ÿ±ŸÅ ÿ≥€í',
  user: 'ÿµÿßÿ±ŸÅ',
  data: '⁄à€åŸπÿß',
  system: 'ŸÜÿ∏ÿßŸÖ',
  function: 'ŸÅŸÜ⁄©ÿ¥ŸÜ',
  coding: '⁄©Ÿà⁄àŸÜ⁄Ø',
  code: '⁄©Ÿà⁄à',
  development: 'ÿ™ÿ±ŸÇ€å',
  web: 'Ÿà€åÿ®',
  application: 'ÿß€åŸæŸÑ€å⁄©€åÿ¥ŸÜ',
  design: '⁄à€åÿ≤ÿßÿ¶ŸÜ',
  security: 'ÿ≥€å⁄©€åŸàÿ±Ÿπ€å',
  privacy: 'Ÿæÿ±ÿßÿ¶€åŸà€åÿ≥€å',
  performance: '⁄©ÿßÿ±⁄©ÿ±ÿØ⁄Ø€å',
  good: 'ÿß⁄Ü⁄æÿß',
  best: 'ÿ®€Åÿ™ÿ±€åŸÜ',
  better: 'ÿ®€Åÿ™ÿ±',
  fast: 'ÿ™€åÿ≤',
  slow: 'ÿ≥ÿ≥ÿ™',
  server: 'ÿ≥ÿ±Ÿàÿ±',
  client: '⁄©ŸÑÿßÿ¶ŸÜŸπ',
  database: '⁄à€åŸπÿß ÿ®€åÿ≥',
  backend: 'ÿ®€å⁄© ÿß€åŸÜ⁄à',
  frontend: 'ŸÅÿ±ŸÜŸπ ÿß€åŸÜ⁄à',
  internet: 'ÿßŸÜŸπÿ±ŸÜ€åŸπ',
  content: 'ŸÖŸàÿßÿØ',
  fetch: 'ÿ≠ÿßÿµŸÑ ⁄©ÿ±€å⁄∫',
  simulated: 'ÿ™ŸÇŸÑ€åÿØ ÿ¥ÿØ€Å',
  fetches: 'ÿ≠ÿßÿµŸÑ ⁄©ÿ±ÿ™ÿß €Å€í',
  render: 'ÿ∏ÿß€Åÿ± ⁄©ÿ±€å⁄∫',
  show: 'ÿØ⁄©⁄æÿßÿ¶€å⁄∫',
  hide: '⁄Ü⁄æŸæÿßÿ¶€å⁄∫',
  loading: 'ŸÑŸà⁄à €ÅŸà ÿ±€Åÿß €Å€í',
  error: 'ÿÆÿ±ÿßÿ®€å',
  message: 'Ÿæ€åÿ∫ÿßŸÖ',
  request: 'ÿØÿ±ÿÆŸàÿßÿ≥ÿ™',
  response: 'ÿ¨Ÿàÿßÿ®',
  success: '⁄©ÿßŸÖ€åÿßÿ®€å',
  failed: 'ŸÜÿß⁄©ÿßŸÖ',
  improve: 'ÿ®€Åÿ™ÿ± ⁄©ÿ±€å⁄∫',
  feature: 'ÿÆÿµŸàÿµ€åÿ™',
  important: 'ÿß€ÅŸÖ',
  introduction: 'ÿ™ÿπÿßÿ±ŸÅ',
  conclusion: 'ŸÜÿ™€åÿ¨€Å',
  compare: 'ŸÖŸàÿßÿ≤ŸÜ€Å ⁄©ÿ±€å⁄∫',
  complex: 'Ÿæ€å⁄Ü€åÿØ€Å',
  update: 'ÿßŸæ ⁄à€åŸπ',
  install: 'ÿßŸÜÿ≥ŸπÿßŸÑ ⁄©ÿ±€å⁄∫',
  download: '⁄àÿßÿ§ŸÜ ŸÑŸà⁄à',
  upload: 'ÿßŸæ ŸÑŸà⁄à',
  cloud: '⁄©ŸÑÿßÿ§⁄à',
  local: 'ŸÖŸÇÿßŸÖ€å',
  version: 'Ÿàÿ±⁄òŸÜ',
  support: 'ŸÖÿØÿØ',
  device: 'ÿ¢ŸÑ€Å',
  mobile: 'ŸÖŸàÿ®ÿßÿ¶ŸÑ',
  desktop: '⁄à€åÿ≥⁄© ŸπÿßŸæ',
  software: 'ÿ≥ÿßŸÅŸπ Ÿà€åÿ¶ÿ±',
  hardware: '€Åÿßÿ±⁄à Ÿà€åÿ¶ÿ±',
  tool: 'ÿßŸàÿ≤ÿßÿ±',
  framework: 'ŸÅÿ±€åŸÖ Ÿàÿ±⁄©',
  library: 'ŸÑÿßÿ¶ÿ®ÿ±€åÿ±€å',
  platform: 'ŸæŸÑ€åŸπ ŸÅÿßÿ±ŸÖ',
  language: 'ÿ≤ÿ®ÿßŸÜ',
  developer: '⁄àŸà€åŸÑŸæÿ±',
  engineer: 'ÿßŸÜÿ¨€åŸÜÿ¶ÿ±',
  write: 'ŸÑ⁄©⁄æ€å⁄∫',
  read: 'Ÿæ⁄ë⁄æ€å⁄∫',
  execute: '⁄ÜŸÑÿßÿ¶€å⁄∫',
  run: '⁄ÜŸÑÿßÿ¶€å⁄∫',
  start: 'ÿ¥ÿ±Ÿàÿπ ⁄©ÿ±€å⁄∫',
  stop: 'ÿ±Ÿà⁄©€å⁄∫',
  explain: 'Ÿàÿ∂ÿßÿ≠ÿ™ ⁄©ÿ±€å⁄∫',
  step: 'ŸÇÿØŸÖ',
  steps: 'ÿßŸÇÿØÿßŸÖÿßÿ™',
  benefit: 'ŸÅÿßÿ¶ÿØ€Å',
  drawback: 'ŸÜŸÇÿµÿßŸÜ',
  reason: 'Ÿàÿ¨€Å',
  purpose: 'ŸÖŸÇÿµÿØ',
  goal: '€ÅÿØŸÅ',
  result: 'ŸÜÿ™€åÿ¨€Å',
  logic: 'ŸÖŸÜÿ∑ŸÇ',
  process: 'ÿπŸÖŸÑ',
  memory: '€åÿßÿØÿØÿßÿ¥ÿ™',
  thread: 'ÿ™⁄æÿ±€å⁄à',
  input: 'ÿßŸÜ ŸæŸπ',
  output: 'ÿ¢ÿ§Ÿπ ŸæŸπ',
  file: 'ŸÅÿßÿ¶ŸÑ',
  folder: 'ŸÅŸàŸÑ⁄àÿ±',
  directory: '⁄àÿßÿ¶ÿ±€å⁄©Ÿπÿ±€å',
  path: 'ÿ±ÿßÿ≥ÿ™€Å',
  syntax: 'ŸÜÿ≠Ÿà',
  debug: '⁄à€åÿ®⁄Ø',
  test: 'ÿ¢ÿ≤ŸÖÿßÿ¶ÿ¥',
  compile: 'ŸÖÿ±ÿ™ÿ® ⁄©ÿ±€å⁄∫',
  loop: 'ŸÑŸàŸæ',
  condition: 'ÿ≠ÿßŸÑÿ™',
  true: 'ÿ≥⁄Ü',
  false: 'ÿ¨⁄æŸàŸπ',
  null: 'ÿÆÿßŸÑ€å',
  undefined: 'ÿ∫€åÿ± ŸÖÿ™ÿπ€åŸÜ',
  object: 'ÿ¥€í',
  array: 'ÿµŸÅ',
  string: 'ÿ≥ŸÑÿ≥ŸÑ€Å',
  number: 'ŸÜŸÖÿ®ÿ±',
  boolean: 'ÿ®ŸàŸÑ€åŸÜ',
  operator: 'ÿ¢Ÿæÿ±€åŸπÿ±',
  operand: 'ÿ¢Ÿæÿ±€å⁄∫⁄à',
  parameter: 'Ÿæ€åÿ±ÿßŸÖ€åŸπÿ±',
  argument: 'ÿØŸÑ€åŸÑ',
  method: 'ÿ∑ÿ±€åŸÇ€Å',
  class: '⁄©ŸÑÿßÿ≥',
  instance: 'ŸÖÿ´ÿßŸÑ',
  inheritance: 'Ÿàÿ±ÿßÿ´ÿ™',
  polymorphism: '⁄©ÿ´€åÿ± ÿ¥⁄©ŸÑ€å',
  encapsulation: 'ÿßÿ≠ÿßÿ∑€Å',
  abstraction: 'ÿÆŸÑÿßÿµ€Å',
  api: 'ÿß€í Ÿæ€å ÿ¢ÿ¶€å',
  rest: 'ÿ±€åÿ≥Ÿπ',
  graphql: '⁄Øÿ±ÿßŸÅ ⁄©€åŸà ÿß€åŸÑ',
  json: 'ÿ¨€åÿ≥ŸÜ',
  xml: 'ÿß€å⁄©ÿ≥ ÿß€åŸÖ ÿß€åŸÑ',
  html: 'ÿß€å⁄Ü Ÿπ€å ÿß€åŸÖ ÿß€åŸÑ',
  css: 'ÿ≥€å ÿß€åÿ≥ ÿß€åÿ≥',
  javascript: 'ÿ¨ÿßŸàÿß ÿßÿ≥⁄©ÿ±ŸæŸπ',
  typescript: 'Ÿπÿßÿ¶Ÿæ ÿßÿ≥⁄©ÿ±ŸæŸπ',
  react: 'ÿ±€å ÿß€å⁄©Ÿπ',
  vue: 'Ÿà€åŸà',
  angular: 'ÿß€åŸÜ⁄ØŸàŸÑÿ±',
  node: 'ŸÜŸà⁄à',
  express: 'ÿß€å⁄©ÿ≥Ÿæÿ±€åÿ≥',
  controller: '⁄©ŸÜŸπÿ±ŸàŸÑÿ±',
  model: 'ŸÖÿß⁄àŸÑ',
  view: 'ŸÖŸÜÿ∏ÿ±',
  mvc: 'ÿß€åŸÖ Ÿà€å ÿ≥€å',
  schema: 'ÿ≥⁄©€åŸÖÿß',
  query: 'ÿ≥ŸàÿßŸÑ',
  mutation: 'ÿ™ÿ®ÿØ€åŸÑ€å',
  subscription: 'ÿ≥ÿ®ÿ≥⁄©ÿ±Ÿæÿ¥ŸÜ',
  authentication: 'ÿ™ÿµÿØ€åŸÇ',
  authorization: 'ÿßÿ¨ÿßÿ≤ÿ™',
  token: 'ŸπŸà⁄©ŸÜ',
  session: 'ÿ≥€åÿ¥ŸÜ',
  cookie: '⁄©Ÿà⁄©€å',
  localstorage: 'ŸÑŸà⁄©ŸÑ ÿßÿ≥ŸπŸàÿ±€åÿ¨',
  deployment: 'ŸÜÿ¥ÿ±',
  hosting: 'ŸÖ€åÿ≤ÿ®ÿßŸÜ€å',
  docker: '⁄àŸà⁄©ÿ±',
  kubernetes: '⁄©€åŸàÿ®ÿ±ŸÜ€åŸπÿ≥',
  virtual: 'Ÿàÿ±⁄ÜŸàÿ¶ŸÑ',
  machine: 'ŸÖÿ¥€åŸÜ',
  container: '⁄©ŸÜŸπ€åŸÜÿ±',
  repository: 'ÿ±€åŸæŸàÿ≤Ÿπÿ±€å',
  commit: '⁄©ŸÖ€åŸπ',
  push: 'Ÿæÿ¥',
  pull: 'ŸæŸÑ',
  branch: 'ÿ®ÿ±ÿßŸÜ⁄Ü',
  merge: 'ÿ∂ŸÖ',
  conflict: 'ÿ™ŸÜÿßÿ≤ÿπ€Å',
  resolve: 'ÿ≠ŸÑ ⁄©ÿ±€å⁄∫',
  log: 'ŸÑÿß⁄Ø',
  monitor: 'ŸÜ⁄Øÿ±ÿßŸÜ€å',
  alert: 'ÿßŸÜÿ™ÿ®ÿß€Å',
  incident: 'ŸàÿßŸÇÿπ€Å',
  bug: 'ÿ®⁄Ø',
  issue: 'ŸÖÿ≥ÿ¶ŸÑ€Å',
  project: 'ŸÖŸÜÿµŸàÿ®€Å',
  team: 'Ÿπ€åŸÖ',
  collaboration: 'ÿ™ÿπÿßŸàŸÜ',
  agile: 'ÿß€åÿ¨ÿßÿ¶ŸÑ',
  scrum: 'ÿ≥⁄©ÿ±ŸÖ',
  sprint: 'ÿ≥Ÿæÿ±ŸÜŸπ',
  meeting: 'ÿßÿ¨ŸÑÿßÿ≥',
  deadline: 'ÿ¢ÿÆÿ±€å ÿ™ÿßÿ±€åÿÆ',
  strategy: 'ÿ≠⁄©ŸÖÿ™ ÿπŸÖŸÑ€å',
  roadmap: 'ÿ±Ÿà⁄à ŸÖ€åŸæ',
  optimize: 'ÿ®€Åÿ™ÿ± ÿ®ŸÜÿßÿ¶€å⁄∫',
  scale: 'Ÿæ€åŸÖÿßŸÜ€Å',
  availability: 'ÿØÿ≥ÿ™€åÿßÿ®€å',
  latency: 'ÿ™ÿßÿÆ€åÿ±',
  throughput: 'ÿ®€åŸÜ⁄àŸà⁄àÿ™⁄æ',
  bandwidth: 'ÿ®€åŸÜ⁄àŸà⁄àÿ™⁄æ',
  protocol: 'Ÿæÿ±ŸàŸπŸà⁄©ŸàŸÑ',
  port: 'ŸæŸàÿ±Ÿπ',
  firewall: 'ŸÅÿßÿ¶ÿ± ŸàÿßŸÑ',
  encryption: 'ÿÆŸÅ€å€Å ⁄©ÿßÿ±€å',
  decryption: '⁄à€å ⁄©ÿ±Ÿæÿ¥ŸÜ',
  hash: '€Å€åÿ¥',
  cipher: 'ÿ≥ÿßÿ¶ŸÅÿ±',
  key: '⁄©ŸÑ€åÿØ',
  algorithm: 'ÿßŸÑ⁄ØŸàÿ±ÿ™⁄æŸÖ',
  vulnerability: '⁄©ŸÖÿ≤Ÿàÿ±€å',
  attack: 'ÿ≠ŸÖŸÑ€Å',
  defense: 'ÿØŸÅÿßÿπ',
  risk: 'ÿÆÿ∑ÿ±€Å',
  threat: 'ÿØ⁄æŸÖ⁄©€å',
  mitigation: '⁄©ŸÖ€å',
  summarize: 'ÿÆŸÑÿßÿµ€Å ÿ®ŸÜÿßÿ¶€å⁄∫',
  article: 'ŸÖÿ∂ŸÖŸàŸÜ',
  writes: 'ŸÑ⁄©⁄æÿ™ÿß €Å€í',
  generates: 'ÿ®ŸÜÿßÿ™ÿß €Å€í',
  content: 'ŸÖŸàÿßÿØ',
  the: '',
  a: '',
};



const translateToUrdu = (text) => {
  return text
    .split(/\b/) // split by word boundaries
    .map((word) => {
      const clean = word.toLowerCase().replace(/[^a-z]/gi, '');
      const translation = dictionary[clean];
      return translation !== undefined ? translation : word;
    })
    .join('');
};


// üöÄ API
export async function POST(req) {
  try {
    const body = await req.json();
    console.log("üì¶ Received Body:", body);

    const { url, text } = body;

    let blogText = text?.trim();
    if (url && !text) {
      blogText = await scrapeBlogContent(url);

      if (!blogText) {
        return NextResponse.json({ error: 'Failed to scrape blog content.' }, { status: 500 });
      }
    }


    if (!blogText) {
      return NextResponse.json({ error: 'No blog content to summarize.' }, { status: 400 });
    }

    const summary = simulateAISummary(blogText);
    const summaryUrdu = translateToUrdu(summary);

    // ‚úÖ Save to Supabase
    const { error: supabaseError } = await supabase.from('summaries').insert([
      {
        original_text: blogText,
        summary_en: summary,
        summary_ur: summaryUrdu,
        url: url || null,
        created_at: new Date().toISOString(),
      },
    ]);
    if (supabaseError) throw supabaseError;

    // ‚úÖ Save to MongoDB via Mongoose
    await connectToMongo();
    await Blog.create({
      url: url || null,
      full_text: blogText,
    });

    return NextResponse.json({ success: true, summary, summaryUrdu });
  } catch (err) {
    console.error("‚ùå API Error:", err);
    return NextResponse.json({ error: err.message || 'Something went wrong' }, { status: 500 });
  }
}
